variant: fcos
version: 1.0.0
passwd:
  users:
    - name: core
      ssh_authorized_keys:
        - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIA0iv4j/9VUeotJ0Kl6n2V0FOCMVHEC1ve2Bw8O3RLOr rokoucha@sanya
        - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIMayjSB1G1n6nF09SvjIsxb9uT6LnEOByAvtYgGFnq8q rokoucha@shizuka
        - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINb9MWmNA2To6XicT5HK2lf29n7F06tWpEQ6E3FPa9uD rokoucha@eila
        - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOaE8LEuHOt0KPkAoOdbvzW93BgE7ZpdSrzlWnc1uZ7n rokoucha@Furstin.local
storage:
  disks:
    - device: /dev/sdb
      wipe_table: true
      partitions:
        - label: podman
          number: 1
          size_mib: 32768
        - label: home
          number: 0
  files:
    - path: /etc/hostname
      overwrite: true
      mode: 0644
      contents:
        inline: tomoko
    - path: /etc/selinux/config
      contents:
        inline: |
          SELINUX=disabled
          SELINUXTYPE=targeted
      mode: 0664
      overwrite: true
    - path: /etc/NetworkManager/system-connections/eth0.nmconnection
      contents:
        inline: |
          [connection]
          interface-name=ens192
          type=ethernet

          [ipv4]
          addresses=10.0.1.5
          dns=10.0.1.1;1.1.1.1
          gateway=10.0.1.1
          method=manual

          [ipv6]
          method=auto
      mode: 0600
      overwrite: true
    - path: /etc/sysconfig/nftables.conf
      contents:
        inline: |
          #
          # This file will contain your nftables rules and
          # is read by the systemd service when restarting
          #
          # These provide an iptables like set of filters
          # (uncomment to include)
          # include "/etc/nftables/arp-filter.nft"
          # include "/etc/nftables/bridge-filter.nft"
          # include "/etc/nftables/inet-filter.nft"
          # include "/etc/nftables/ipv4-filter.nft"
          # include "/etc/nftables/ipv4-mangle.nft"
          # include "/etc/nftables/ipv4-nat.nft"
          # include "/etc/nftables/ipv4-raw.nft"
          # include "/etc/nftables/ipv6-filter.nft"
          # include "/etc/nftables/ipv6-mangle.nft"
          # include "/etc/nftables/ipv6-nat.nft"
          # include "/etc/nftables/ipv6-raw.nft"
          flush ruleset;

          table inet filter {
            chain input {
              type filter hook input priority 0; policy drop;

              ct state established,related accept;
              ct state invalid drop;

              iif lo accept;

              ip6 nexthdr icmpv6 icmpv6 type { destination-unreachable, packet-too-big, time-exceeded, parameter-problem, nd-router-advert, nd-neighbor-solicit, nd-neighbor-advert } accept;
              ip protocol icmp icmp type { destination-unreachable, router-advertisement, time-exceeded, parameter-problem } accept;

              ip6 nexthdr icmpv6 icmpv6 type echo-request limit rate 10/second accept;
              ip protocol icmp icmp type echo-request limit rate 10/second accept;

              # Allow SSH
              tcp dport ssh limit rate 15/minute accept;

              # Allow HTTP and HTTPS
              tcp dport { http, https } accept;

              # Allow nginx redirect ports
              tcp dport { 50080, 50443 } accept;

              # Allow TeamSpeak
              udp dport 9987 accept;
              tcp dport { 10011, 30033 } accept;
            }

            chain forward {
              type filter hook forward priority 0; policy drop;
            }

            chain output {
              type filter hook output priority 0; policy accept;
            }
          }

          table inet nat {
            chain prerouting {
              type nat hook prerouting priority dstnat; policy accept;
              tcp dport 80 redirect to :50080;
              tcp dport 443 redirect to :50443;
            }
          }
      mode: 0600
      overwrite: true
    - path: /etc/sysctl.d/50-forward.conf
      contents:
        inline: |
          net.ipv4.ip_forward = 1
          net.ipv6.conf.all.forwarding = 1
      mode: 0644
    - path: /opt/open-vm-tools/Dockerfile
      contents:
        inline: |
          FROM fedora:32

          RUN dnf install \
            --setopt=install_weak_deps=False \
            --setopt=override_install_langs=en_US.utf8 \
            --setopt=tsflags=nodocs \
            -y \
            open-vm-tools \
            && dnf clean all

          CMD /usr/bin/vmtoolsd
      mode: 0644
    - path: /var/lib/systemd/linger/core
      mode: 0644
  filesystems:
    - path: /var/home
      device: /dev/disk/by-partlabel/home
      format: xfs
    - path: /var/lib/containers
      device: /dev/disk/by-partlabel/podman
      format: xfs
  links:
    - path: /etc/localtime
      target: /usr/share/zoneinfo/Asia/Tokyo
systemd:
  units:
    - name: var-home.mount
      enabled: true
      contents: |
        [Unit]
        Before=local-fs.target

        [Mount]
        What=/dev/disk/by-partlabel/home
        Where=/var/home

        [Install]
        WantedBy=local-fs.target
    - name: var-lib-containers.mount
      enabled: true
      contents: |
        [Unit]
        Description=Mount Podman directory
        Before=local-fs.target

        [Mount]
        What=/dev/disk/by-partlabel/podman
        Where=/var/lib/containers

        [Install]
        WantedBy=local-fs.target
    - name: nftables.service
      enabled: true
    - name: vmtoolsd.service
      enabled: true
      contents: |
        [Unit]
        After=network-online.target
        ConditionVirtualization=vmware
        Description=Open Virtual Machine Tools (VMware Tools)
        Wants=network-online.target

        [Service]
        Environment=PODMAN_SYSTEMD_UNIT=%n
        Restart=on-failure
        TimeoutStopSec=60
        TimeoutStartSec=0
        ExecStartPre=/bin/rm -f %t/container-vmtoolsd.pid %t/container-vmtoolsd.ctr-id
        ExecStartPre=/usr/bin/podman build -t open-vm-tools /opt/open-vm-tools
        ExecStart=/usr/bin/podman run \
          --cidfile %t/container-vmtoolsd.ctr-id \
          --conmon-pidfile %t/container-vmtoolsd.pid \
          --ipc=host \
          --name vmtoolsd \
          --net=host \
          --pid=host \
          --privileged \
          --replace \
          --rm \
          --uts=host \
          -e SYSTEMD_IGNORE_CHROOT=1 \
          -v /proc/:/hostproc/ \
          -v /run/systemd:/run/systemd \
          -v /sys/fs/cgroup:/sys/fs/cgroup \
          open-vm-tools
        ExecStop=/usr/bin/podman stop --ignore --cidfile %t/container-vmtoolsd.ctr-id -t 10
        ExecStopPost=/usr/bin/podman rm --ignore -f --cidfile %t/container-vmtoolsd.ctr-id
        PIDFile=%t/container-vmtoolsd.pid
        Type=simple

        [Install]
        WantedBy=multi-user.target
    - name: cgroups-v2-karg.service
      enabled: true
      contents: |
        [Unit]
        Description=Switch To cgroups v2
        # We run after `systemd-machine-id-commit.service` to ensure that
        # `ConditionFirstBoot=true` services won't rerun on the next boot.
        After=systemd-machine-id-commit.service
        ConditionKernelCommandLine=systemd.unified_cgroup_hierarchy
        ConditionPathExists=!/var/lib/cgroups-v2-karg.stamp

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/bin/rpm-ostree kargs --delete=systemd.unified_cgroup_hierarchy
        ExecStart=/bin/touch /var/lib/cgroups-v2-karg.stamp
        ExecStart=/bin/systemctl --no-block reboot

        [Install]
        WantedBy=multi-user.target
