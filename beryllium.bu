variant: fcos
version: 1.5.0
passwd:
  users:
    - groups:
        - docker
        - wheel
      name: core
      ssh_authorized_keys:
        - ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEYJoYObmHubty0NCSHuFRp0YjordT5T/7d5KYXSnnHOlFEqTx5UTdqbokUrThgqp+zwv3Aqb75KKX9Gyc18szk= sanya
        - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIEto28bqf5JfCGMehpMYk4IFKLOo09ckd800shUJdN4S iPad-mini-6
        - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIKQUcLLvGHqhe/DJTxqA948ijXwsebWTVkQQlYjzQZE iPhone-13-mini
        - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIm15/KadEcXrd+fh0fD/ys2FqjtnHIQk1KYDO7WpxNe eila
storage:
  files:
    - contents:
        inline: |
          [connection]
          id=enp1s0
          interface-name=enp1s0
          type=ethernet

          [ipv4]
          method=auto

          [ipv6]
          addr-gen-mode=eui64
          may-fail=false
          method=auto
      mode: 0600
      overwrite: true
      path: /etc/NetworkManager/system-connections/enp1s0.nmconnection
    - contents:
        local: .env/certbot-credentials.ini
      mode: 0600
      path: /etc/certbot-credentials.ini
    - contents:
        local: .env/certbot.env
      mode: 0600
      path: /etc/certbot.env
    - contents:
        local: .env/cloudflare-ddns.env
      mode: 0600
      path: /etc/cloudflare-ddns.env
    - contents:
        inline: |
          [Unit]
          Description = Renew certificates with systemd-timer.
          Wants=network-online.target
          After=network-online.target

          [Service]
          EnvironmentFile=%E/certbot.env
          ExecStartPre=mkdir -p %S/certificates

          [Container]
          ContainerName=certbot
          Exec=certonly \
              --non-interactive \
              --keep-until-expiring \
              --agree-tos \
              --key-type ecdsa \
              --elliptic-curve secp384r1 \
              --config-dir /config \
              --email ${CERTBOT_EMAIL} \
              --dns-cloudflare \
              --dns-cloudflare-credentials /certbot-credentials.ini \
              --dns-cloudflare-propagation-seconds 30 \
              -d %H.dns.ggrel.net
          Image=docker.io/certbot/dns-cloudflare:v2.10.0
          Volume=%E/certbot-credentials.ini:/certbot-credentials.ini
          Volume=%S/certificates:/config
      mode: 0644
      path: /etc/containers/systemd/certbot.container
    - contents:
        inline: |
          [Unit]
          Description=Create or Update dns record in cloudflare.
          Wants=network-online.target
          After=network-online.target

          [Container]
          ContainerName=cloudflare-ddns
          EnvironmentFile=/etc/cloudflare-ddns.env
          Exec=--ipv6 --hostname=%H --suffix=dns ggrel.net
          Image=ghcr.io/rokoucha/cloudflare-ddns:latest
          Network=host

          [Install]
          WantedBy=multi-user.target default.target
      mode: 0644
      path: /etc/containers/systemd/cloudflare-ddns.container
    - contents:
        inline: |
          [Unit]
          Description=mackerel-agent is an agent program to post your hosts' metrics to mackerel.io.
          Wants=network-online.target
          After=network-online.target

          [Container]
          ContainerName=mackerel-agent
          Environment=HOST_ETC=/rootfs/etc
          EnvironmentFile=/etc/mackerel-agent.env
          HostName=%H
          Image=docker.io/mackerel/mackerel-agent:0.81.0
          Network=host
          PodmanArgs=--ipc host
          PodmanArgs=--pid host
          Volume=/:/rootfs:ro
          Volume=/dev/disk:/dev/disk:ro
          Volume=/sys:/sys:ro
          Volume=mackerel-agent:/var/lib/mackerel-agent

          [Install]
          WantedBy=multi-user.target default.target
      mode: 0644
      path: /etc/containers/systemd/mackerel-agent.container
    - contents:
        inline: beryllium
      mode: 0644
      overwrite: true
      path: /etc/hostname
    - contents:
        local: .env/mackerel-agent.env
      mode: 0600
      path: /etc/mackerel-agent.env
    - contents:
        inline: |
          SELINUX=permissive
          SELINUXTYPE=targeted
      mode: 0644
      overwrite: true
      path: /etc/selinux/config
    - contents:
        inline: |
          # /etc/sysconfig/docker

          # Modify these options if you want to change the way the docker daemon runs
          OPTIONS="--selinux-enabled \
            --log-driver=journald \
            --live-restore \
            --default-ulimit nofile=1024:1024 \
            --init-path /usr/libexec/docker/docker-init \
            --userland-proxy-path /usr/libexec/docker/docker-proxy \
            --host 0.0.0.0:2376 \
            --tlsverify \
            --tlscacert=/var/lib/docker-ca/ca.crt \
            --tlscert=/var/lib/certificates/live/beryllium.dns.ggrel.net/fullchain.pem \
            --tlskey=/var/lib/certificates/live/beryllium.dns.ggrel.net/privkey.pem \
          "
      mode: 0644
      overwrite: true
      path: /etc/sysconfig/docker
    - contents:
        inline: |
          #
          # This file will contain your nftables rules and
          # is read by the systemd service when restarting
          #
          # These provide an iptables like set of filters
          # (uncomment to include)
          # include "/etc/nftables/arp-filter.nft"
          # include "/etc/nftables/bridge-filter.nft"
          # include "/etc/nftables/inet-filter.nft"
          # include "/etc/nftables/ipv4-filter.nft"
          # include "/etc/nftables/ipv4-mangle.nft"
          # include "/etc/nftables/ipv4-nat.nft"
          # include "/etc/nftables/ipv4-raw.nft"
          # include "/etc/nftables/ipv6-filter.nft"
          # include "/etc/nftables/ipv6-mangle.nft"
          # include "/etc/nftables/ipv6-nat.nft"
          # include "/etc/nftables/ipv6-raw.nft"
          flush ruleset;

          table inet filter {
            chain input {
              type filter hook input priority 0; policy drop;

              ct state { established, related } accept;
              ct state invalid drop;

              iif lo accept;

              ip6 nexthdr icmpv6 icmpv6 type { destination-unreachable, packet-too-big, time-exceeded, parameter-problem, nd-router-advert, nd-neighbor-solicit, nd-neighbor-advert } accept;
              ip protocol icmp icmp type { destination-unreachable, router-advertisement, time-exceeded, parameter-problem } accept;

              ip6 nexthdr icmpv6 icmpv6 type echo-request limit rate 10/second accept;
              ip protocol icmp icmp type echo-request limit rate 10/second accept;

              # Allow SSH
              tcp dport ssh limit rate 15/minute accept;

              # Allow prometheus exporters
              tcp dport { 9100, 9115 } ip saddr { 172.16.2.0/24 } accept;
              tcp dport { 9100, 9115 } ip6 saddr { 2400:2410:3800:2502::/64 } accept;

              # Allow docker with TLS
              tcp dport 2376 ip saddr { 172.16.2.0/24 } accept;
              tcp dport 2376 ip6 saddr { 2400:2410:3f66:2400::/64, 2400:2410:3800:2502::/64 } accept;
            }
          }
      mode: 0600
      overwrite: true
      path: /etc/sysconfig/nftables.conf
    - contents:
        inline: |
          net.ipv4.ip_forward = 1
          net.ipv6.conf.all.forwarding = 1
      mode: 0644
      path: /etc/sysctl.d/50-forward.conf
    - contents:
        inline: |
          [Unit]
          Description=Renew certs with systemd-timer

          [Timer]
          OnBootSec=60
          OnUnitActiveSec=2w

          [Install]
          WantedBy=timers.target
      mode: 0644
      path: /etc/systemd/system/certbot.timer
    - contents:
        inline: |
          [Unit]
          Description=Exporter for machine metrics
          Wants=network-online.target
          After=network-online.target

          [Container]
          ContainerName=node_exporter
          Exec=--collector.processes --collector.systemd --path.rootfs=/host
          Image=quay.io/prometheus/node-exporter:v1.8.0
          Network=host
          PodmanArgs=--pid host
          Volume=/:/host:ro,rslave
          Volume=/var/run/dbus/system_bus_socket:/var/run/dbus/system_bus_socket

          [Install]
          WantedBy=multi-user.target default.target
      mode: 0644
      path: /etc/containers/systemd/node_exporter.container
    - contents:
        local: .env/ca.crt
      mode: 0600
      path: /var/lib/docker-ca/ca.crt
    - mode: 0644
      path: /var/lib/systemd/linger/core
  links:
    - path: /etc/localtime
      target: /usr/share/zoneinfo/Asia/Tokyo
systemd:
  units:
    - enabled: true
      name: certbot.timer
    - enabled: true
      name: docker.service
    - enabled: true
      name: nftables.service
